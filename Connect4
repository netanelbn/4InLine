package il.cellcom.com;

import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
public class Connect4 {
    public String[][] gameStatus = new String[6][7];
    public List<String> RedPlayer = new LinkedList<>();
    public List<String> YellowPlayer = new LinkedList<>();
    public void start(){
        boolean firstPlayer = true;
        String player;
        String colour;
        String input;
        Scanner scanner;
        
        
        
        
        
        
        
        
        while(true){
            printOutput();
            if(checkFull()){
                System.out.println("It's a draw.");
                System.exit(0);
            }
            int column = -1;
            if(firstPlayer){
                player = " 1 [RED] ";
                colour = "R";
            }else{
                player = " 2 [YELLOW] ";
                colour = "Y";
            }
            scanner = new Scanner( System.in );
            System.out.print( "Player" + player + "- choose column (1-7): " );
            input = scanner.nextLine();
            try{
                column = Integer.parseInt(input);
            }catch (NumberFormatException e){
                System.out.println("Please enter number values only. Please try again.");
            }
            if(column < 1 || column > 7){
                System.out.println("Please enter valid number column (1- 7)");
            }else{
                boolean successInsertion = updateGame(column, colour);
                if(!successInsertion){
                    System.out.println("The column is full please choose other column.");
                }else {
                    if (firstPlayer) {
                        firstPlayer = false;
                    } else {
                        firstPlayer = true;
                    }
                }
            }
            if(YellowPlayer.size() > 3){
                checkHorizontalVertical(YellowPlayer);
            }else if(RedPlayer.size() > 3){
                checkHorizontalVertical(RedPlayer);
            }
            checkDiagonal();
        }
    }
    public void checkHorizontalVertical(List<String> playerNodes){
        for(String node: playerNodes){
            String[] split = node.split(",");
            int row = Integer.parseInt(split[0]);
            int column = Integer.parseInt(split[1]);
            String colour = gameStatus[row][column];
            int count = 1;
            for(int i = 0; i < gameStatus.length; i++){
                if(gameStatus[i][column] != null && gameStatus[i][column].equals(colour)){
                    count++;
                    if(count == 4){
                        break;
                    }
                }else{
                    count = 0;
                }
            }
            if(count >= 4){
                printOutWinner(colour);
            }else{
                count = 0;
                for(int i = 0; i < gameStatus[row].length; i++){
                    if(gameStatus[row][i] != null && gameStatus[row][i].equals(colour)){
                        count++;
                        if(count == 4){
                            break;
                        }
                    }else{
                        count = 0;
                    }
                }
            }
            if(count >= 4){
                printOutWinner(colour);
            }
        }
    }
    public void checkDiagonal(){
        int count = 1;
        int countPlusOne = 1;
        int countPlusTwo = 1;
        int countPlusThree = 1;
        int countMinusOne = 1;
        int countMinusTwo = 1;
        String colour = "";
        String colourPlusOne = "";
        String colourPlusTwo = "";
        String colourPlusThree = "";
        String colourMinusOne = "";
        String colourMinusTwo = "";
        for(int i = 0; i < gameStatus.length; i++){
            if(gameStatus[i][i] != null){
                if(colour.isEmpty()){
                    colour = gameStatus[i][i];
                }else {
                    if (colour.equals(gameStatus[i][i])) {
                        count++;
                        if (count == 4) {
                            printOutWinner(colour);
                        }
                    } else {
                        count = 1;
                        colour = gameStatus[i][i];
                    }
                }
            }
            if(gameStatus[i][i+1] != null){
                if(colourPlusOne.isEmpty()){
                    colourPlusOne = gameStatus[i][i+1];
                }else {
                    if (colourPlusOne.equals(gameStatus[i][i+1])) {
                        countPlusOne++;
                        if (countPlusOne == 4) {
                            printOutWinner(colourPlusOne);
                        }
                    } else {
                        countPlusOne = 1;
                        colourPlusOne = gameStatus[i][i+1];
                    }
                }
            }
            if( i+2 < gameStatus[i].length && gameStatus[i][i+2] != null){
                if(colourPlusTwo.isEmpty()){
                    colourPlusTwo = gameStatus[i][i+2];
                }else {
                    if (colourPlusTwo.equals(gameStatus[i][i+2])) {
                        countPlusTwo++;
                        if (countPlusTwo == 4) {
                            printOutWinner(colourPlusTwo);
                        }
                    } else {
                        countPlusTwo = 1;
                        colourPlusTwo = gameStatus[i][i+2];
                    }
                }
            }
            if( i+3 < gameStatus[i].length && gameStatus[i][i+3] != null){
                if(colourPlusThree.isEmpty()){
                    colourPlusThree = gameStatus[i][i+3];
                }else {
                    if (colourPlusThree.equals(gameStatus[i][i+3])) {
                        countPlusThree++;
                        if (countPlusThree == 4) {
                            printOutWinner(colourPlusThree);
                        }
                    } else {
                        countPlusThree = 1;
                        colourPlusThree = gameStatus[i][i+3];
                    }
                }
            }
            if( i-1 >= 0 && gameStatus[i][i-1] != null){
                if(colourMinusOne.isEmpty()){
                    colourMinusOne = gameStatus[i][i-1];
                }else {
                    if (colourMinusOne.equals(gameStatus[i][i-1])) {
                        countMinusOne++;
                        if (countMinusOne == 4) {
                            printOutWinner(colourMinusOne);
                        }
                    } else {
                        countMinusOne = 1;
                        colourMinusOne = gameStatus[i][i-1];
                    }
                }
            }
            if( i-2 >= 0 && gameStatus[i][i-2] != null){
                if(colourMinusTwo.isEmpty()){
                    colourMinusTwo = gameStatus[i][i-2];
                }else {
                    if (colourMinusTwo.equals(gameStatus[i][i-2])) {
                        countMinusTwo++;
                        if (countMinusTwo == 4) {
                            printOutWinner(colourMinusTwo);
                        }
                    } else {
                        countMinusTwo = 1;
                        colourMinusTwo = gameStatus[i][i-2];
                    }
                }
            }
        }
        int zero = 0;
        countPlusOne = 1;
        countPlusTwo = 1;
        countPlusThree = 1;
        colour = "";
        colourPlusOne = "";
        colourPlusTwo = "";
        colourPlusThree = "";
        for(int i = gameStatus.length-1; i >= 0; i--){
            if(gameStatus[i][zero] != null){
                if(colour.isEmpty()){
                    colour = gameStatus[i][zero];
                }else {
                    if (colour.equals(gameStatus[i][zero])) {
                        count++;
                        if (count == 4) {
                            printOutWinner(colour);
                        }
                    } else {
                        count = 1;
                        colour = gameStatus[i][zero];
                    }
                }
            }
            if(gameStatus[i][zero+1] != null){
                if(colourPlusOne.isEmpty()){
                    colourPlusOne = gameStatus[i][zero+1];
                }else {
                    if (colourPlusOne.equals(gameStatus[i][zero+1])) {
                        countPlusOne++;
                        if (countPlusOne == 4) {
                            printOutWinner(colourPlusOne);
                        }
                    } else {
                        countPlusOne = 1;
                        colourPlusOne = gameStatus[i][zero+1];
                    }
                }
            }
            if(zero+2 < gameStatus[i].length && gameStatus[i][zero+2] != null){
                if(colourPlusTwo.isEmpty()){
                    colourPlusTwo = gameStatus[i][zero+2];
                }else {
                    if (colourPlusTwo.equals(gameStatus[i][zero+2])) {
                        countPlusTwo++;
                        if (countPlusTwo == 4) {
                            printOutWinner(colourPlusTwo);
                        }
                    } else {
                        countPlusTwo = 1;
                        colourPlusTwo = gameStatus[i][zero+2];
                    }
                }
            }
            if(zero+3 < gameStatus[i].length-1 && gameStatus[i][zero+3] != null){
                if(colourPlusThree.isEmpty()){
                    colourPlusThree = gameStatus[i][zero+3];
                }else {
                    if (colourPlusThree.equals(gameStatus[i][zero+3])) {
                        countPlusThree++;
                        if (countPlusThree == 4) {
                            printOutWinner(colourPlusThree);
                        }
                    } else {
                        countPlusThree = 1;
                        colourPlusThree = gameStatus[i][zero+3];
                    }
                }
            }
            if(i-1 >= 0 && gameStatus[i-1][zero] != null){
                if(colourMinusOne.isEmpty()){
                    colourMinusOne = gameStatus[i-1][zero];
                }else {
                    if (colourMinusOne.equals(gameStatus[i-1][zero])) {
                        countMinusOne++;
                        if (countMinusOne == 4) {
                            printOutWinner(colourMinusOne);
                        }
                    } else {
                        countMinusOne = 1;
                        colourMinusOne = gameStatus[i-1][zero];
                    }
                }
            }
            if( i-2 >= 0 && gameStatus[i-2][zero] != null){
                if(colourMinusTwo.isEmpty()){
                    colourMinusTwo = gameStatus[i-2][zero];
                }else {
                    if (colourMinusTwo.equals(gameStatus[i-2][zero])) {
                        countMinusTwo++;
                        if (countMinusTwo == 4) {
                            printOutWinner(colourMinusTwo);
                        }
                    } else {
                        countMinusTwo = 1;
                        colourMinusTwo = gameStatus[i-2][zero];
                    }
                }
            }
            zero++;
        }
    }
   
    
    public void printOutWinner(String colour){
        printOutput();
        if(colour.equals("G")) {
            System.out.println("Player 2 [GREEN] wins!");
            System.exit(0);
        }else{
            System.out.println("Player 1 [RED] wins!");
            System.exit(0);
        }
    }
    public boolean updateGame(int column, String colour){
        column--;
        for(int i = 0; i < gameStatus.length; i++){
            if(gameStatus[i][column] == null){
                gameStatus[i][column] = colour;
                if(colour.equals("G")){
                	YellowPlayer.add(i + "," + column);
                }else {
                	RedPlayer.add(i + "," + column);
                }
                return true;
            }
        }
        return false;
    }
    public boolean checkFull(){
        for(int i = 0; i < gameStatus.length; i++){
            for(int k = 0;k <gameStatus[i].length; k++){
                if(gameStatus[i][k] == null){
                    return false;
                }
            }
        }
        if(YellowPlayer.size() == 21 && RedPlayer.size() == 21){
            return true;
        }else {
            return false;
        }
    }
    private void printOutput(){
        String output = "";
        for(int i = gameStatus.length-1; i >= 0; i--){
            output += "||";
            for(int k = 0; k < gameStatus[i].length; k++){
                if(gameStatus[i][k] == null) {
                    output += " ||";
                }else{
                    output += gameStatus[i][k] + "||";
                }
            }
            output += "\n";
        }
        System.out.println(output);
    }
    
    public static void main(String[] args){
        Connect4 CF = new Connect4();
        CF.start();
    }

}
